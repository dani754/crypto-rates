{"version":3,"sources":["components/CurrentTable.js","components/server.js","components/DateTime.js","components/Current.js","components/SortTable.js","components/HistoryTable.js","components/AdjustTable.js","components/History.js","App.js","index.js"],"names":["CurrentTable","props","rates","map","rate","i","url","timeOnly","dateISO","Date","toLocaleTimeString","timeStyle","hour12","timeZone","priceString","price","String","dot","indexOf","length","substr","substring","replace","dateParseForRouting","date","console","log","dateParse","getDate","padStart","getMonth","getFullYear","parsedDateToInputFormat","ddmmyy","Current","getCurrentRates","fetch","method","dataType","headers","then","res","json","data","timePart","prices","BTC","ETH","LTC","setState","time","state","catch","err","Array","isArray","this","className","onClick","coin","switch","React","Component","arrangeToTable","row","dateStr","timeStr","priceStr","sortByDate","table","sort","a","b","localeCompare","HistoryTable","tableArray","sortByAscDate","sortByPrice","AdjustTable","handleDateToParent","handleChange","e","target","value","name","handleSubmit","event","parsedStart","start","parsedEnd","end","onUpdate","preventDefault","dates","times","defaultStart","defaultEnd","onSubmit","for","onChange","type","History","getHistoricRates","routeURL","coinNew","startNew","endNew","today","App","useState","page","togglePage","content","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b80589f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Table.css';\r\n\r\nfunction CurrentTable(props) {\r\n\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th><button >BTC</button></th>\r\n                    <th><button >ETH</button></th>\r\n                    <th><button >LTC</button></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    {\r\n                        props.rates.map( (rate, i) => {\r\n                            return (\r\n                                <td key={i} >{rate}</td>\r\n                            );\r\n                        })\r\n                    }\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default CurrentTable;","const url = 'https://crypto-rates-server.herokuapp.com/';\r\n\r\nexport default url;","\r\nexport function timeOnly(dateISO){\r\n    const time = new Date(dateISO).toLocaleTimeString('en',\r\n    { timeStyle: 'short', hour12: false, timeZone: 'Asia/Jerusalem' });\r\n    return time;\r\n}\r\n\r\nexport function priceArrayString(ratesArray){\r\n    let pricesArray = ratesArray.map ( rate => {\r\n        return priceString(rate);\r\n    });\r\n    return pricesArray;\r\n}\r\n\r\nexport function priceString(rate){\r\n    let price = String(rate);\r\n    let dot = price.indexOf('.');\r\n        if (dot === -1 && price.length > 3){\r\n            let substr = price.substring(price.length-3);\r\n            price = price.replace(substr, ','+substr);\r\n        }\r\n        else if (dot > 0 && price.substring(0,dot).length > 3){\r\n            let substr = price.substring(dot-3);\r\n            price = price.replace(substr, ','+substr);\r\n        }\r\n    return price;\r\n}\r\n\r\nexport function arrangeToTable(dataArray, coin) {\r\n    let datesAndPricesArrays = {\r\n        dates: [],\r\n        times: [],\r\n        prices: [],\r\n    };\r\n\r\n    datesAndPricesArrays.dates = dataArray.map( row => {\r\n        let date = row.date;\r\n        return (\r\n            date\r\n        );\r\n    });\r\n    datesAndPricesArrays.times = dataArray.map( row => {\r\n        let time = timeOnly(row.date);\r\n        return time;\r\n    });\r\n    datesAndPricesArrays.prices = dataArray.map( row => {\r\n        switch(coin){\r\n            case 'ETH':\r\n                return row.ETH;\r\n            case 'LTC':\r\n                return row.LTC;\r\n            default:\r\n                return row.BTC;\r\n        }\r\n    });\r\n    datesAndPricesArrays.prices = priceString(datesAndPricesArrays.prices);\r\n    return datesAndPricesArrays;\r\n}\r\n\r\nexport function dateParseForRouting(date){\r\n    console.log(\"date to parse\", date);\r\n    let dd = String(date.getDate()).padStart(2, '0');\r\n    let mm = String(date.getMonth() + 1).padStart(2, '0');\r\n    let yy = String(date.getFullYear()).substring(2);\r\n    let dateParse = dd + mm + yy;\r\n    console.log(\"date after parse\", dateParse);\r\n    return dateParse;\r\n}\r\n\r\nexport function parsedDateToInputFormat(ddmmyy){\r\n    console.log(\"ddmmyy\", ddmmyy);\r\n    let date = \"20\" + String(ddmmyy.substring(4)) + \"-\" + ddmmyy.substring(2,4) + \"-\" + ddmmyy.substring(0,2);\r\n    console.log(\"date to input\", date);\r\n    return date;\r\n}","import React from 'react';\r\nimport CurrentTable from './CurrentTable';\r\nimport url from './server';\r\nimport {timeOnly, priceArrayString} from './DateTime';\r\nimport './Page.css';\r\n\r\nexport default class Current extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            rates: [],\r\n            time: \"\",\r\n        }\r\n    }\r\n\r\n    getCurrentRates = () => {\r\n        fetch(url, {\r\n            method: \"get\",\r\n            dataType: \"json\",\r\n            headers: {'Content-Type': 'application/json'},\r\n        }).then( res => res.json() )\r\n        .then( data => {\r\n            console.log(\"data\", data);\r\n            let timePart = timeOnly(data.date);\r\n            let prices = priceArrayString([data.BTC, data.ETH, data.LTC]);\r\n            this.setState({\r\n                rates: prices,\r\n                time: timePart,\r\n            })\r\n            console.log(\"rates\", this.state.rates);\r\n        }).catch( err => console.log(err));        \r\n    }\r\n    \r\n    render() {\r\n        if ( Array.isArray(this.state.rates) && this.state.rates.length === 0 )\r\n            this.getCurrentRates();\r\n            \r\n        return (\r\n            <div className=\"Body\" >\r\n                <h2>Last Update on {this.state.time}</h2>\r\n                <CurrentTable rates ={this.state.rates} onClick={(coin)=>this.props.switch(coin)} />\r\n                <button className=\"BigButton\" onClick={()=>this.props.switch('BTC')} >Get Rates History</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\r\nimport {timeOnly, priceString} from './DateTime';\r\n\r\nfunction arrangeToTable(data, coin){\r\n    let table = data.map( row => {\r\n        let dateStr = row.date.substring(0, 10);\r\n        let timeStr = timeOnly(row.date);\r\n        let priceStr = '';\r\n        switch(coin){\r\n            case 'ETH':\r\n                priceStr = priceString(row.ETH);\r\n                break;\r\n            case 'LTC':\r\n                priceStr = priceString(row.LTC);\r\n                break;\r\n            default:\r\n                priceStr = priceString(row.BTC);\r\n        }\r\n        return (\r\n            {\r\n                date: dateStr,\r\n                time: timeStr,\r\n                price: priceStr,\r\n            }\r\n        );\r\n    })\r\n    return table;\r\n}\r\n\r\nexport function sortByDate(data, coin){\r\n    let table = arrangeToTable(data, coin);\r\n    table.sort(function(a, b){return b.date.localeCompare(a.date) || b.time.localeCompare(a.time)});\r\n    return table;\r\n}\r\n\r\nexport function sortByAscDate(data, coin){\r\n    let table = arrangeToTable(data, coin);\r\n    table.sort(function(a, b){return a.date.localeCompare(b.date) || a.time.localeCompare(b.time)});\r\n    return table;\r\n}\r\n\r\n\r\n\r\nexport function sortByPrice(data, coin){\r\n    let table = arrangeToTable(data, coin);\r\n    table.sort(function(a, b){return a.price - b.price});\r\n    return table;\r\n}\r\n","import React from 'react';\r\nimport './Table.css';\r\nimport {sortByDate, sortByAscDate, sortByPrice} from './SortTable';\r\n\r\nfunction HistoryTable(props) {\r\n\r\n    let tableArray = sortByDate(props.data, props.coin);\r\n\r\n    return (\r\n        <table className=\"longTable\" >\r\n            <thead>\r\n                <tr>\r\n                    <th><button onClick={()=>{tableArray = sortByDate(props.data, props.coin)}} >Date</button></th>\r\n                    <th><button onClick={()=>{tableArray = sortByAscDate(props.data, props.coin)}}  >Time</button></th>\r\n                    <th><button onClick={()=>{tableArray = sortByPrice(props.data, props.coin)}}  >Price</button></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    tableArray.map( (rate,i) => {\r\n                        return (\r\n                            <tr key={i} >\r\n                                <td key={rate.date + i}>{rate.date}</td>\r\n                                <td key={rate.time + i}>{rate.time}</td>\r\n                                <td key={rate.price + i} >{rate.price}</td>\r\n                            </tr>\r\n                        );\r\n                    })\r\n                }\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default HistoryTable;","import React from 'react';\r\nimport './Table.css';\r\nimport {dateParseForRouting, parsedDateToInputFormat} from './DateTime';\r\n\r\nexport default class  AdjustTable extends React.Component  {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            coin: 'BTC',\r\n            start: '',\r\n            end: '',\r\n            dates: [],\r\n            times: [],\r\n            prices: [],\r\n        }\r\n    }\r\n\r\n    handleDateToParent = (date) => {\r\n        let ddmmyy = dateParseForRouting(new Date(date));\r\n        return ddmmyy;\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const target = e.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        let parsedStart = this.handleDateToParent(this.state.start);\r\n        let parsedEnd = this.handleDateToParent(this.state.end);\r\n        this.props.onUpdate(this.state.coin, parsedStart, parsedEnd);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render(){\r\n\r\n        if (this.state.start ===  ''){\r\n            let defaultStart = parsedDateToInputFormat(this.props.start);\r\n            let defaultEnd = parsedDateToInputFormat(this.props.end);\r\n            this.setState({\r\n                start: defaultStart,\r\n                end: defaultEnd,\r\n            });\r\n        }\r\n        console.log(this.state, this.props);\r\n\r\n        return (\r\n            <form onSubmit={this.handleSubmit} >\r\n                <label for=\"coin\" >Coin:</label>\r\n                <select name=\"coin\" value={this.state.coin} onChange={this.handleChange}>\r\n                    <option value=\"BTC\">Bitcoin</option>\r\n                    <option value=\"ETH\">Ethereum</option>\r\n                    <option value=\"LTC\">Litecoin</option>\r\n                </select>\r\n                <label for=\"start\" >From:</label>\r\n                    <input name=\"start\" type=\"date\" value={this.state.start} onChange={this.handleChange} />\r\n                <label for=\"end\" >Until:</label>\r\n                    <input name=\"end\" type=\"date\"  value={this.state.end} onChange={this.handleChange}  />\r\n                <button >OK</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport HistoryTable from './HistoryTable';\r\nimport AdjustTable from './AdjustTable';\r\nimport url from './server';\r\nimport {dateParseForRouting} from './DateTime';\r\nimport './Page.css';\r\n\r\nexport default class History extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            coin: 'BTC',\r\n            start: '',\r\n            end: '',\r\n            rates: [],\r\n        }\r\n    }\r\n\r\n    getHistoricRates = () => {\r\n        let routeURL = url +this.state.coin + '/' + this.state.start + '/' + this.state.end;\r\n        fetch(routeURL, {\r\n            method: \"get\",\r\n            dataType: \"json\",\r\n            headers: {'Content-Type': 'application/json'},\r\n        }).then( res => res.json() )\r\n        .then( data => {\r\n            console.log(\"data\", data);\r\n            this.setState({\r\n                rates: data,\r\n            })\r\n        }).catch( err => console.log(err));        \r\n    }\r\n\r\n    handleChange = (coinNew,startNew,endNew) => {\r\n        this.setState({\r\n            coin: coinNew,\r\n            start: startNew,\r\n            end: endNew,\r\n            rates: [],\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        if ( Array.isArray(this.state.rates) && this.state.rates.length === 0 && this.state.start <= dateParseForRouting(new Date()))\r\n            this.getHistoricRates();\r\n\r\n        if ( this.state.start === ''){\r\n            let today = dateParseForRouting(new Date());\r\n            this.setState({\r\n                start: today,\r\n                end: today,\r\n            })\r\n        }\r\n            \r\n        return (\r\n            <div className=\"Body\" >\r\n                <button className=\"BigButton\" onClick={()=>this.props.switch('current')} >Back To Live Rates</button>\r\n                <AdjustTable coin={this.state.coin} start={this.state.start} end={this.state.end} onUpdate={(coin,start,end)=>this.handleChange(coin,start,end)} />\r\n                <HistoryTable data={this.state.rates} coin={this.state.coin} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport Current from './components/Current';\nimport History from './components/History';\n\nfunction App() {\n\n  const [page, togglePage] = useState('current');\n\n  let content = <Current switch={(coin)=>togglePage(coin)} />;\n  if (page !== 'current'){\n    content = <History switch={(coin)=>{togglePage(coin)}} coin={page} />;\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Crypto Rates in USD $</h1>\n      {content}\n    </div>\n  );\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}